/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cleanup.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 19:16:37 by jschroed          #+#    #+#             */
/*   Updated: 2024/08/12 21:23:38 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	cleanup_simulation(t_data *data)
{
	int		i;

	i = 0;
	while (i < data->num_philos)
	{
		pthread_mutex_destroy(&data->chopsticks[i].mutex);
		pthread_mutex_destroy(&data->philos[i].meal_mutex);
		i++;
	}
	pthread_mutex_destroy(&data->print_mutex);
	pthread_mutex_destroy(&data->simulation_mutex);
	free(data->chopsticks);
	free(data->philos);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 19:15:30 by jschroed          #+#    #+#             */
/*   Updated: 2024/10/20 14:19:08 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static void	assign_chopsticks(\
		t_philo *philo, t_chopstick *chopsticks, int num_philos)
{
	philo->left_chopstick = &chopsticks[philo->id - 1];
	philo->right_chopstick = &chopsticks[philo->id % num_philos];
}

static int	init_philos(t_data *data)
{
	int		i;

	i = 0;
	while (i < data->num_philos)
	{
		data->philos[i].data = data;
		data->philos[i].id = i + 1;
		data->philos[i].meals_eaten = 0;
		data->philos[i].has_eaten_enough = false;
		data->philos[i].last_meal_time = 0;
		if (pthread_mutex_init(&data->philos[i].meal_mutex, NULL) != 0)
			return (print_error("Philosopher mutex initialization failed", 1));
		assign_chopsticks(&data->philos[i], data->chopsticks, data->num_philos);
		i++;
	}
	return (SUCCESS);
}

static int	init_chopsticks(t_data *data)
{
	int		i;

	i = 0;
	while (i < data->num_philos)
	{
		if (pthread_mutex_init(&data->chopsticks[i].mutex, NULL) != 0)
			return (print_error("Chopstick mutex initialization failed", 1));
		data->chopsticks[i].id = i + 1;
		i++;
	}
	return (SUCCESS);
}

static int	init_data(t_data *data)
{
	data->simulation_running = false;
	data->time_to_think = \
						data->time_to_die - \
						data->time_to_eat - \
						data->time_to_sleep;
	if (pthread_mutex_init(&data->print_mutex, NULL) != 0 || \
			pthread_mutex_init(&data->simulation_mutex, NULL) != 0)
		return (print_error("Simulation mutex initialization failed", 1));
	data->simulation_start_time = get_current_time();
	return (SUCCESS);
}

int	initialize_simulation(t_data *data)
{
	data->philos = malloc(sizeof(t_philo) * data->num_philos);
	data->chopsticks = malloc(sizeof(t_chopstick) * data->num_philos);
	if (!data->philos || !data->chopsticks)
		return (print_error("Memory allocation failed", 1));
	if (init_chopsticks(data) != SUCCESS)
		return (ERROR);
	if (init_philos(data) != SUCCESS)
		return (ERROR);
	if (init_data(data) != SUCCESS)
		return (ERROR);
	return (SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   intput.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 19:17:49 by jschroed          #+#    #+#             */
/*   Updated: 2024/08/12 21:27:03 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static int	validate_argument_string(const char *s)
{
	int		i;

	i = 0;
	if (s[0] == '0')
		return (print_error("Arguments must be greater than 0.", 1));
	while (s[i])
	{
		if (s[i] == '-' || (s[i] < '0' || s[i] > '9'))
			return (print_error("Arguments must be positive numbers only.", 1));
		i++;
	}
	if (i > 10)
		return (print_error("Number is too big (max 10 digits).", 1));
	return (SUCCESS);
}

static int	validate_arguments(t_data *data, int argc)
{
	if (data->num_philos < 1 || data->num_philos > 200)
		return (print_error(
				"Number of philosophers must be between 1 and 200.", 1));
	if (data->time_to_die < 60)
		return (print_error(
				"Time to die must be at least 60 ms.", 1));
	if (data->time_to_eat < 60)
		return (print_error(
				"Time to eat must be at least 60 ms.", 1));
	if (data->time_to_sleep < 60)
		return (print_error(
				"Time to sleep must be at least 60 ms.", 1));
	if (argc == 6 && data->meals_required < 1)
		return (print_error(
				"Number of meals must be at least 1.", 1));
	return (SUCCESS);
}

int	parse_arguments(int argc, char **argv, t_data *data)
{
	int		i;

	i = 1;
	if (argc != 5 && argc != 6)
	{
		print_parse_error_usage(argv[0]);
		return (ERROR);
	}
	while (i < argc)
	{
		if (validate_argument_string(argv[i]) != 0)
			return (ERROR);
		i++;
	}
	data->num_philos = atoi_positive_long(argv[1]);
	data->time_to_die = atoi_positive_long(argv[2]);
	data->time_to_eat = atoi_positive_long(argv[3]);
	data->time_to_sleep = atoi_positive_long(argv[4]);
	if (argc == 6)
		data->meals_required = atoi_positive_long(argv[5]);
	else
		data->meals_required = -1;
	return (validate_arguments(data, argc));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 18:58:50 by jschroed          #+#    #+#             */
/*   Updated: 2024/08/12 21:27:17 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	main(int argc, char **argv)
{
	t_data	data;

	if (parse_arguments(argc, argv, &data) != 0)
		return (ERROR);
	if (initialize_simulation(&data) != 0)
		return (ERROR);
	start_simulation(&data);
	print_statistics(&data);
	cleanup_simulation(&data);
	return (SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   print.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 22:51:10 by jschroed          #+#    #+#             */
/*   Updated: 2024/08/13 09:33:59 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	print_error(const char *msg, int return_code)
{
	printf(COLOR_RED "Error: %s\n" COLOR_RESET, msg);
	return (return_code);
}

const char	*get_color_for_status(const char *status)
{
	if (ft_strncmp(status, "is thinking", 11) == 0)
		return (COLOR_BLUE);
	else if (ft_strncmp(status, "is eating", 9) == 0)
		return (COLOR_GREEN);
	else if (ft_strncmp(status, "is sleeping", 11) == 0)
		return (COLOR_CYAN);
	else if (ft_strncmp(status, "died", 4) == 0)
		return (COLOR_RED);
	return (COLOR_RESET);
}

void	print_status(t_data *data, int philo_id, const char *status)
{
	const char	*color;

	color = get_color_for_status(status);
	pthread_mutex_lock(&data->print_mutex);
	if (is_simulation_running(data))
	{
		color = get_color_for_status(status);
		printf("%s%ld %d %s%s\n", \
				color, \
				get_current_time() - data->simulation_start_time, \
				philo_id, \
				status, \
				COLOR_RESET);
	}
	pthread_mutex_unlock(&data->print_mutex);
}

void	print_parse_error_usage(const char *program_name)
{
	printf(COLOR_RED "Error: Invalid number of arguments.\n" COLOR_RESET);
	printf(COLOR_YELLOW);
	printf("Usage: %s <args>\n", program_name);
	printf("Arguments:\n");
	printf("  1. number_of_philosophers\n");
	printf("  2. time_to_die (in milliseconds)\n");
	printf("  3. time_to_eat (in milliseconds)\n");
	printf("  4. time_to_sleep (in milliseconds)\n");
	printf("  5. [number_of_times_each_philosopher_must_eat] (optional)\n");
	printf(COLOR_RESET);
}

void	print_statistics(t_data *data)
{
	int		i;
	int		total_meals;

	total_meals = 0;
	i = 0;
	printf(COLOR_YELLOW "\n--- Simulation Statistics ---\n");
	while (i < data->num_philos)
	{
		printf("Philosopher %d ate %d full meals\n", \
				data->philos[i].id, data->philos[i].meals_eaten);
		total_meals += data->philos[i].meals_eaten;
		i++;
	}
	printf("Total full meals eaten: %d\n", total_meals);
	printf("Average full meals per philosopher: %.2f\n", \
			(float)total_meals / data->num_philos);
	if (data->meals_required > 0)
	{
		printf("Required meals: %d\n", data->meals_required);
		if (total_meals >= data->num_philos * data->meals_required)
			printf(COLOR_GREEN "Simulation completed successfully\n");
		else
			printf(COLOR_RED "Simulation ended early\n");
	}
	printf(COLOR_YELLOW "----------------------------\n" COLOR_RESET);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routine_monitor.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 23:03:31 by jschroed          #+#    #+#             */
/*   Updated: 2024/08/12 21:35:28 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static bool	check_philosopher_death(t_data *data, t_philo *philo)
{
	long	current_time;

	current_time = get_current_time();
	if (current_time - philo->last_meal_time > data->time_to_die)
	{
		print_status(data, philo->id, "died");
		set_simulation_status(data, false);
		return (true);
	}
	return (false);
}

static bool	check_all_philosophers_full(t_data *data)
{
	int		i;
	bool	all_full;

	i = 0;
	all_full = true;
	while (i < data->num_philos)
	{
		pthread_mutex_lock(&data->philos[i].meal_mutex);
		if (check_philosopher_death(data, &data->philos[i]))
		{
			pthread_mutex_unlock(&data->philos[i].meal_mutex);
			return (true);
		}
		if (data->meals_required > 0 && \
				data->philos[i].meals_eaten < data->meals_required)
			all_full = (false);
		pthread_mutex_unlock(&data->philos[i].meal_mutex);
		i++;
	}
	if (data->meals_required > 0 && all_full)
	{
		set_simulation_status(data, false);
		return (true);
	}
	return (false);
}

void	*monitor_routine(void *arg)
{
	t_data	*data;

	data = (t_data *)arg;
	while (is_simulation_running(data))
	{
		if (check_all_philosophers_full(data))
			return (NULL);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routine_philo.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 21:50:03 by jschroed          #+#    #+#             */
/*   Updated: 2024/10/20 14:20:12 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

static void	increment_meal_count(t_philo *philo)
{
	pthread_mutex_lock(&philo->meal_mutex);
	philo->meals_eaten++;
	pthread_mutex_unlock(&philo->meal_mutex);
}

static void	philo_eat(t_philo *philo)
{
	bool	meal_completed;

	meal_completed = false;
	take_chopsticks(philo);
	pthread_mutex_lock(&philo->meal_mutex);
	philo->last_meal_time = get_current_time();
	pthread_mutex_unlock(&philo->meal_mutex);
	print_status(philo->data, philo->id, "is eating");
	ft_usleep(philo->data->time_to_eat);
	meal_completed = true;
	release_chopsticks(philo);
	if (meal_completed)
		increment_meal_count(philo);
}

static void	philo_sleep(t_philo *philo)
{
	print_status(philo->data, philo->id, "is sleeping");
	ft_usleep(philo->data->time_to_sleep);
}

void	philo_think(t_philo *philo)
{
	print_status(philo->data, philo->id, "is thinking");
}

void	*philosopher_routine(void *arg)
{
	t_philo		*philo;

	philo = (t_philo *)arg;
	philo->last_meal_time = philo->data->simulation_start_time;
	if (philo->id % 2 == 0)
		ft_usleep(150);
	if (philo->data->num_philos == 1)
	{
		handle_single_philosopher(philo);
		return (NULL);
	}
	while (is_simulation_running(philo->data))
	{
		philo_eat(philo);
		philo_sleep(philo);
		philo_think(philo);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   routine_utils.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 23:29:51 by jschroed          #+#    #+#             */
/*   Updated: 2024/10/20 14:20:29 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	take_chopsticks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		pthread_mutex_lock(&philo->right_chopstick->mutex);
		print_status(philo->data, philo->id, "has taken a chopstick");
		pthread_mutex_lock(&philo->left_chopstick->mutex);
		print_status(philo->data, philo->id, "has taken a chopstick");
	}
	else
	{
		pthread_mutex_lock(&philo->left_chopstick->mutex);
		print_status(philo->data, philo->id, "has taken a chopstick");
		pthread_mutex_lock(&philo->right_chopstick->mutex);
		print_status(philo->data, philo->id, "has taken a chopstick");
	}
}

void	release_chopsticks(t_philo *philo)
{
	pthread_mutex_unlock(&philo->left_chopstick->mutex);
	pthread_mutex_unlock(&philo->right_chopstick->mutex);
}

void	handle_single_philosopher(t_philo *philo)
{
	print_status(philo->data, philo->id, "has taken a chopstick");
	while (is_simulation_running(philo->data))
		ft_usleep(100);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   simulation.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/02 16:45:26 by jschroed          #+#    #+#             */
/*   Updated: 2024/08/12 21:36:50 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	join_philosopher_threads(t_data *data)
{
	int		i;

	i = 0;
	while (i < data->num_philos)
	{
		pthread_join(data->philos[i].thread, NULL);
		i++;
	}
}

void	start_simulation(t_data *data)
{
	int			i;
	pthread_t	monitor;

	data->simulation_start_time = get_current_time();
	set_simulation_status(data, true);
	i = 0;
	while (i < data->num_philos)
	{
		if (pthread_create(&data->philos[i].thread, \
					NULL, philosopher_routine, &data->philos[i]) != 0)
		{
			set_simulation_status(data, false);
			return ;
		}
		i++;
	}
	if (pthread_create(&monitor, NULL, monitor_routine, data) != 0)
	{
		set_simulation_status(data, false);
		return ;
	}
	pthread_join(monitor, NULL);
	set_simulation_status(data, false);
	join_philosopher_threads(data);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   simulation_utils.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/11 20:05:18 by jschroed          #+#    #+#             */
/*   Updated: 2024/08/12 21:37:03 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

bool	is_simulation_running(t_data *data)
{
	bool	status;

	pthread_mutex_lock(&data->simulation_mutex);
	status = data->simulation_running;
	pthread_mutex_unlock(&data->simulation_mutex);
	return (status);
}

void	set_simulation_status(t_data *data, bool status)
{
	pthread_mutex_lock(&data->simulation_mutex);
	data->simulation_running = status;
	pthread_mutex_unlock(&data->simulation_mutex);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 09:25:07 by jschroed          #+#    #+#             */
/*   Updated: 2024/10/20 14:22:13 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	while (n--)
	{
		if (*s1 != *s2 || !*s1 || !*s2)
			return ((unsigned char)*s1 - (unsigned char)*s2);
		s1++;
		s2++;
	}
	return (0);
}

long	atoi_positive_long(const char *str)
{
	long	result;

	result = 0;
	while ((*str >= 9 && *str <= 13) || *str == 32)
		str++;
	if (*str == '+')
		str++;
	while (*str >= '0' && *str <= '9')
	{
		result = result * 10 + (*str - '0');
		str++;
	}
	return (result);
}

long	get_current_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return ((tv.tv_sec * (long)1000) + (tv.tv_usec / 1000));
}

void	ft_usleep(long milliseconds)
{
	long	start_time;

	start_time = get_current_time();
	while (get_current_time() - start_time < milliseconds)
		usleep(500);
}
